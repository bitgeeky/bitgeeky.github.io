<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pankaj Malhotra</title>
    <link>http://pankajmalhotra.com</link>
    <atom:link href="http://pankajmalhotra.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>Pankaj Malhotra aka bitgeeky's blog on Automation, Web QA, Web Development, Algorithms, Coding and his life.</description>
    <language>en-us</language>
    <pubDate>Mon, 27 Jul 2015 02:43:13 +0530</pubDate>
    <lastBuildDate>Mon, 27 Jul 2015 02:43:13 +0530</lastBuildDate>

    
      <item>
        <title>Skip SSL HostName Verification Java HttpsURLConnection</title>
        <link>http://pankajmalhotra.com/Skip-SSL-HostName-Verification-Java-HttpsURLConnection</link>
        <pubDate>Mon, 27 Jul 2015 20:39:10 +0000</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;There might arise a situation when you have to make a secure request to a server with certificates that do not have host name to which you are making a request.&lt;/p&gt;

&lt;p&gt;For example a certificate generated for &lt;code&gt;https://example.com&lt;/code&gt; might not support its ip address &lt;code&gt;https://ex.com.ip.add&lt;/code&gt; as a valid host name.&lt;/p&gt;

&lt;p&gt;PS: This situation is different from errors arrising from invalid or self signed certificates. This situation arrises when certificates are valid but the host name verification fails.&lt;/p&gt;

&lt;p&gt;You might see an error like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java.io.IOException: Hostname &amp;#39;0.0.0.0&amp;#39; was not verified
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where in place of &lt;code&gt;0.0.0.0&lt;/code&gt; its the server&amp;#39;s ip address.&lt;/p&gt;

&lt;p&gt;In such a situation all you need to do is to skip host name verification for the URL connection. You can Override the default &lt;code&gt;HostnameVerifier&lt;/code&gt; with a custom verifier to add exception for the host you are making request to.&lt;/p&gt;

&lt;p&gt;This should be done only if you are confident that the server you are sending request to doesn&amp;#39;t has any kind of security issues, because when you skip host name verification there is actually no point of &lt;code&gt;HTTPS/SSL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a particular host you can write a custom &lt;code&gt;HostnameVerifier&lt;/code&gt; like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;HostnameVerifier hostnameVerifier = new HostnameVerifier() {
    @Override
    public boolean verify(String hostname, SSLSession session) {
        HostnameVerifier hv =
            HttpsURLConnection.getDefaultHostnameVerifier();
        return hv.verify(&amp;quot;hostname&amp;quot;, session);
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or just &lt;code&gt;return true&lt;/code&gt; if you want to skip for all hosts on a particular URL connection.&lt;/p&gt;

&lt;p&gt;A sample code that fetches JSON data using such request:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import android.util.Log;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.Exception;
import java.net.URL;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSession;

public class SkipVerification implements Runnable {

    private static final String TAG = SkipVerification.class.toString();
    private String server_port;
    private String serverIP;

    public SkipVerification(String serverIP, String server_port){
        this.serverIP = serverIP;
        this.server_port = server_port;
    }

    public void run() {
        try {
            HostnameVerifier hostnameVerifier = new HostnameVerifier() {
                @Override
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            };

            URL url = new URL(&amp;quot;https://&amp;quot; + serverIP + &amp;quot;:&amp;quot; + server_port + &amp;quot;/json&amp;quot;);
            InputStream inStream = null;

            try {
                HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();
                urlConnection.setRequestProperty(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;);
                urlConnection.setHostnameVerifier(hostnameVerifier);
                inStream = urlConnection.getInputStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(inStream));
            } catch (Exception e) {
                Log.e(TAG, &amp;quot;error fetching data from server&amp;quot;, e);
            } finally {
                if (inStream != null) {
                    inStream.close();
                }
            }
        } catch (Exception e) {
            Log.e(TAG, &amp;quot;error initializing SkipVerificationn thread&amp;quot;, e);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above code makes a &lt;code&gt;https&lt;/code&gt; request to a server whose certificate doesn&amp;#39;t have an entry of its ip address as a verified hostname. The custom &lt;code&gt;HostnameVerifier&lt;/code&gt; skips any kind of hostname verification particular to a &lt;code&gt;HttpsURLConnection&lt;/code&gt;.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Retrieving Safari History From JailBroken IOS Device</title>
        <link>http://pankajmalhotra.com/Retrieving-Safari-History-From-JailBroken-IOS-Device</link>
        <pubDate>Sun, 28 Jun 2015 07:10:58 +0000</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;h3&gt;This post is for Jail Broken devices and tested on IOS 8.1.2.&lt;/h3&gt;

&lt;p&gt;This post explains how to retrieve safari history database from a jail broken ios device. Its a sqlite3 database file which contains all history data but the challenge is that there is no specific path on which the files exist, so you will have to first find the files.&lt;/p&gt;

&lt;p&gt;1 Install OpenSSH on your jailbroken device (through Cydia).&lt;/p&gt;

&lt;p&gt;2 Find History.db* files&lt;/p&gt;

&lt;p&gt;Application data for most applications reside in subdirectories under:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/private/var/mobile/Containers/Data/Application/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The files which contain safari history data are:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;History.db
History.db-shm
History.db-wal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To find path to these files just do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ find /private/var/mobile/Containers/Data/Application -iname &amp;#39;History.db*&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3 SCP files to a local location&lt;/p&gt;

&lt;p&gt;Basically to get the data from these files you need &lt;code&gt;sqlite3&lt;/code&gt;. You can either install &lt;code&gt;sqlite3&lt;/code&gt; app from cydia to the mobile or better just scp the datbase files to machine you are working on.&lt;/p&gt;

&lt;p&gt;You can copy the files one by one or better use &lt;code&gt;sshpass&lt;/code&gt; and &lt;code&gt;xargs&lt;/code&gt; to copy all files at one go like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sshpass -p &amp;#39;alpine&amp;#39; ssh  root@mobile_ip &amp;quot;find /private/var/mobile/Containers/Data/Application -name &amp;#39;History.db*&amp;#39;&amp;quot; \
    | xargs -I{} \
    sshpass -p &amp;#39;alpine&amp;#39; scp -P $SSH_PORT root@mobile_ip:&amp;#39;{}&amp;#39; /path/to/tmp/db/on/local/machine;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4 Load the sqlite database&lt;/p&gt;

&lt;p&gt;If you change your working directory to the directory containing &lt;code&gt;History.db*&lt;/code&gt; files and do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sqlite3 History.db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will load sqlite3 database and now you can get any data you want about browser history.&lt;/p&gt;

&lt;p&gt;5 Example query to get latest page visited:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; select url from history_items where id in( select history_item from history_visits order by visit_time desc limit 1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it ! Now you can just play around and get stats like number of times and time when a website was visited and much more.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Start App Service At BootUp On JailBroken IOS Device</title>
        <link>http://pankajmalhotra.com/Start-App-Service-At-BootUp-On-JailBroken-IOS-Device</link>
        <pubDate>Sat, 27 Jun 2015 07:19:35 +0000</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;h3&gt;This post is for Jail Broken devices and tested on IOS 8.1.2.&lt;/h3&gt;

&lt;p&gt;To start an application or service everytime on device boot up just follow these simple steps:&lt;/p&gt;

&lt;p&gt;1 Install OpenSSH on your jailbroken device (through Cydia).&lt;/p&gt;

&lt;p&gt;2 Write a boot script for your application or service.
This can be anything as simpler as a bash script or anything that launches your app.&lt;/p&gt;

&lt;p&gt;3 Write a plist for application. An example plist for application is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple Computer//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;com.example.BackgroundService&amp;lt;/string&amp;gt;

        &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
        &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;/path/to/program/eg/bin/bash&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;path/to/launchscript/eg/root/BackgroundService&amp;lt;/string&amp;gt;
        &amp;lt;/array&amp;gt;

        &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
        &amp;lt;true/&amp;gt;

        &amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;/var/logs/BackgroundService.log&amp;lt;/string&amp;gt;

        &amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;/tmp/BackgroundService.log&amp;lt;/string&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can name it anything for example &lt;code&gt;com.example.BackgroundService.plist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4 Copy the &lt;code&gt;plist&lt;/code&gt; file to &lt;code&gt;/Library/LaunchDaemons/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;5 Load the &lt;code&gt;plist&lt;/code&gt; using:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ launchctl load /Library/LaunchDaemons/com.example.BackgroundService.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it ! Now every time you boot up the device your service will start running automatically.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Websockets SSL/TLS Termination Using NGINX Proxy</title>
        <link>http://pankajmalhotra.com/Websockets-SSL-TLS-Termination-Using-NGINX-Proxy</link>
        <pubDate>Sun, 14 Jun 2015 09:17:00 +0000</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;There can be a situation where your application is configured to communicate via websockets protocol &lt;code&gt;ws&lt;/code&gt; and you want to expose it over the internet while still keeping the client side secure by SSL/TLS or say the client will always get an &lt;code&gt;HTTPS&lt;/code&gt; page.&lt;/p&gt;

&lt;p&gt;In such a situation the &lt;code&gt;HTTPS&lt;/code&gt; page won&amp;#39;t allow insecure content to be present on the page so you need a &lt;code&gt;wss&lt;/code&gt; protocol, but in my case I had no control over the application server. So a solution to such a problem is to use a SSL/TLS terminator in between the application server and the client.&lt;/p&gt;

&lt;p&gt;There are a few options which act as a websockets proxy, I decided to use NGINX because of the variety of options it provides such as listening mutiple ports, allowing multiple upstreams, support for unix sockets and a bunch of other features without comprimising the performace parameters.&lt;/p&gt;

&lt;p&gt;The final architecture after using NGINX as a websockets proxy is:
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/public/images/nginx.png&quot; alt=&quot;NGINX Proxy&quot; style=&quot;margin-right:15px; width: 100%; height: 100%&quot; /&gt;
&lt;br/&gt;
We use secure websockets communication on client side using the &lt;code&gt;wss&lt;/code&gt; protocol and inbetween client and application server is a NGINX proxy server which allows to terminate the SSL/TLS connection and establishes an insecure connection using &lt;code&gt;ws&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;All that is needed to convert an instance of NGINX to a proxy server is a few changes in configuration file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;map $http_upgrade $connection_upgrade {
    default upgrade;
    &amp;#39;&amp;#39; close;
}

upstream appserver {
    server 192.168.100.10:9222; # appserver_ip:ws_port
}

server {
    listen 8888; // client_wss_port

    ssl on;
    ssl_certificate /path/to/crt;
    ssl_certificate_key /path/to/key;


    location / {
        proxy_pass http://appserver;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above configuration should be within &lt;code&gt;http{ }&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;Replace the &lt;code&gt;appserver_ip&lt;/code&gt; and &lt;code&gt;ws_port&lt;/code&gt; with the ip and port of your application server, &lt;code&gt;client_wss_port&lt;/code&gt; with the port on which client makes a &lt;code&gt;wss&lt;/code&gt; connection and provide paths to certificate/key.&lt;/p&gt;

&lt;p&gt;Just reload the NGINX configuration or restart the server to get everything up and running.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Injecting Javascript In HTML Content Using MITM Proxy</title>
        <link>http://pankajmalhotra.com/Injecting-Javascript-In-HTML-Content-Using-MITM-Proxy</link>
        <pubDate>Mon, 08 Jun 2015 21:43:10 +0000</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;Its been a few days that I have been learning about Man In The Middle MITM proxy, my use case was to inject a simple javascript to html pages that users open behind proxy server.&lt;/p&gt;

&lt;p&gt;It actually involves a bit insight on how to do this, and a few small challenges. Here I describe the solutions I found to do this:&lt;/p&gt;

&lt;h2&gt;What is MITM proxy ?&lt;/h2&gt;

&lt;p&gt;An interactive console program that allows traffic flows to be intercepted, inspected, modified and replayed.
So basically it gives the proxy administartor the power to modify any traffic that goes through the proxy. You can play with html content, inject elements, get header data, modify headers, dns spoofing, traffic filteration, redirection and a lot more things you can do with mitmproxy.
&lt;br/&gt;
&lt;a href=&quot;https://github.com/mitmproxy/mitmproxy/tree/master/examples&quot;&gt;Example scripts for doing experimentation&lt;/a&gt;
&lt;br/&gt;
For more information visit &lt;a href=&quot;https://mitmproxy.org/&quot;&gt;mitmproxy official website&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;For OS X its distributed as a homebrew package and is really simple to install, just do &lt;code&gt;$ brew install mitmproxy&lt;/code&gt;.
For troubleshooting and setting environment variables have a look at the &lt;a href=&quot;https://mitmproxy.org/doc/install.html&quot;&gt;installation guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure you have all the certificates used by mitm proxy in &lt;code&gt;~/.mitmproxy/&lt;/code&gt;. Install certificates on browser by browsing to &lt;code&gt;mitm.it&lt;/code&gt;. If the traffic is passing through the proxy server this page will show you options to install certificates, just select the platform you are browsing on.  For more information about generating and installing certificates see &lt;a href=&quot;https://mitmproxy.org/doc/certinstall.html&quot;&gt;about cerificates&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Running&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mitmproxy -p port_number
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The default port on which proxy server runs is &lt;code&gt;8080&lt;/code&gt; but you can specify the &lt;code&gt;port_number&lt;/code&gt; by using &lt;code&gt;-p&lt;/code&gt; flag. It will open up a window showing traffic passing through proxy.&lt;/p&gt;

&lt;p&gt;Configure browser to use proxy server by specifying host as &lt;code&gt;localhost&lt;/code&gt; and the port on which proxy server is listening.
You will start seeing requests though the proxy and traffic passing through it.
&lt;img src=&quot;/public/images/mitmproxy.png&quot; alt=&quot;MITM Console&quot; style=&quot;margin-right:15px; width: 100%; height: 100%&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Modifying traffic passing through proxy&lt;/h2&gt;

&lt;p&gt;You can pass scripts as arguments while running proxy server which will modify the traffic according to the logic you specify in script.
The script will operate on each request passing through proxy, and will make the desired modification.&lt;/p&gt;

&lt;h3&gt;Inline Scripts&lt;/h3&gt;

&lt;p&gt;Basic Structure of an Inline script is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def on_event(context, flow):
    some_logic
    another_logic
    do_something
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first argument to each event method is an instance of ScriptContext that lets the script interact with the global mitmproxy state. 
&lt;code&gt;on_event&lt;/code&gt; can be an event like request, response, start, clientconnect, serverconnect or any other event from this &lt;a href=&quot;https://mitmproxy.org/doc/scripting/inlinescripts.html&quot;&gt;list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Script to inject javascript to html content:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Usage: mitmdump -s &amp;quot;js_injector.py src&amp;quot;
# (this script works best with --anticache)
from bs4 import BeautifulSoup
from libmproxy.protocol.http import decoded

# On start of proxy server ask for src as an argument
def start(context, argv):
    if len(argv) != 2:
        raise ValueError(&amp;#39;Usage: -s &amp;quot;js_injector.py src&amp;quot;&amp;#39;)
    context.src_url = argv[1]


def response(context, flow):
    if flow.request.host in context.src_url:
        return # Make sure JS isn&amp;#39;t injected to itself
    with decoded(flow.response):  # Remove content encoding (gzip, ...)
        html = BeautifulSoup(flow.response.content)
        if html.body:
            script = html.new_tag(
                &amp;quot;script&amp;quot;,
                src=context.src_url,
                type=&amp;#39;application/javascript&amp;#39;)
            html.body.insert(0, script)
            flow.response.content = str(html)
            context.log(&amp;quot;Script injected.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the mitm proxy using:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mitmdump -p 8888 -s &amp;quot;js_injector.py http://path/to/src.js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: that we are using &lt;code&gt;mitmdump&lt;/code&gt; istead of &lt;code&gt;mitmproxy&lt;/code&gt; for getting more detailed output.&lt;/p&gt;

&lt;p&gt;Note: If you want to inject javascript in an &lt;code&gt;https&lt;/code&gt; website, your javascript file must also be hosted on &lt;code&gt;https&lt;/code&gt; server.&lt;/p&gt;

&lt;p&gt;So far so good:
Now open the url in browser configured to use proxy server, you should see a broken website.&lt;/p&gt;

&lt;h3&gt;Any guess why the website is broken ?&lt;/h3&gt;

&lt;p&gt;The website is broken because in previous script our javascript is getting injected on every resource on page having &lt;code&gt;html.body&lt;/code&gt; which should not be the case.&lt;/p&gt;

&lt;p&gt;Replace:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-- if html.body:
with
++ if html.body and (&amp;#39;text/html&amp;#39; in flow.response.headers[&amp;quot;content-type&amp;quot;][0]):
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to make sure only requests with &lt;code&gt;text/html&lt;/code&gt; in their header get js injection.&lt;/p&gt;

&lt;p&gt;Try to open the page again, it should now open fine with &lt;em&gt;almost&lt;/em&gt; all resources loading properly.&lt;/p&gt;

&lt;h3&gt;So why &lt;em&gt;almost&lt;/em&gt; all and not &lt;em&gt;ALL&lt;/em&gt; ? Try to figure it out and read further:&lt;/h3&gt;

&lt;p&gt;The reason is that an html page has multiple resources that can be of type text/html for example an iframe loading content from an external resource. But we want to inject our js only to the page that is opened by user at current time i.e the main page.&lt;/p&gt;

&lt;p&gt;Its not possible to do this without knowing what page is the main page and what are the elements within it. Therefore to overcome this situation we come up with a filter.&lt;/p&gt;

&lt;p&gt;filter.js&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if(parent.document.URL!=document.location.href)
       throw new Error(&amp;quot;Not the main page&amp;quot;);

(function(e){e.setAttribute(&amp;quot;src&amp;quot;,&amp;quot;http://path/to/script.js&amp;quot;);
document.getElementsByTagName(&amp;quot;body&amp;quot;)[0].appendChild(e);})
(document.createElement(&amp;quot;script&amp;quot;));void(0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So basically injecting this filter on proxy server side by replacing path/to/script.js with the path to actual js that we want to inject will do a client side verification to identify the main page and allow execution of js only on main page otherwise it will throw an error &amp;quot;Not the main page&amp;quot;.&lt;/p&gt;

&lt;p&gt;This solves our problem of js getting executed multiple times on a single page. Now the js we inject will execute only once but still on the proxy server side our js filter will get inject to all valid html resources i.e which have &lt;code&gt;text/html&lt;/code&gt; as their &lt;code&gt;content-type&lt;/code&gt; in header response.&lt;/p&gt;

&lt;h2&gt;Final Steps:&lt;/h2&gt;

&lt;p&gt;Inject JS filter on html resources:&lt;/p&gt;

&lt;p&gt;Final version of &lt;code&gt;js_injector.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Usage: mitmdump -s &amp;quot;js_injector.py src&amp;quot;
# (this script works best with --anticache)
from bs4 import BeautifulSoup
from libmproxy.protocol.http import decoded

# On start of proxy server ask for src as an argument
def start(context, argv):
    if len(argv) != 2:
        raise ValueError(&amp;#39;Usage: -s &amp;quot;js_injector.py src&amp;quot;&amp;#39;)
    context.src_url = argv[1]


def response(context, flow):
    with decoded(flow.response):  # Remove content encoding (gzip, ...)
        html = BeautifulSoup(flow.response.content)
        &amp;quot;&amp;quot;&amp;quot;
        # To Allow CORS
        if &amp;quot;Content-Security-Policy&amp;quot; in flow.response.headers:
            del flow.response.headers[&amp;quot;Content-Security-Policy&amp;quot;]
        &amp;quot;&amp;quot;&amp;quot;
        if html.body and (&amp;#39;text/html&amp;#39; in flow.response.headers[&amp;quot;content-type&amp;quot;][0]):
            script = html.new_tag(
                &amp;quot;script&amp;quot;,
                src=context.src_url)
            html.body.insert(0, script)
            flow.response.content = str(html)
            context.log(&amp;quot;******* Filter Injected *******&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mitmdump -p 8888 -s &amp;quot;js_injector.py http://path/to/filter.js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Final version of &lt;code&gt;filter.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if(parent.document.URL!=document.location.href)
       throw new Error(&amp;quot;Not the main page&amp;quot;);

(function(e){e.setAttribute(&amp;quot;src&amp;quot;,&amp;quot;http://path/to/script.js&amp;quot;);
document.getElementsByTagName(&amp;quot;body&amp;quot;)[0].appendChild(e);})
(document.createElement(&amp;quot;script&amp;quot;));void(0);

console.log(&amp;quot;******* Script Injected *******&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replace &lt;code&gt;/path/to/script.js&lt;/code&gt; in &lt;code&gt;filter.js&lt;/code&gt; with path to the script you want to actually inject.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it ! Now the JS you inject will be executed only one time per page i.e the actual page and not the resources in it.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Simple HTTPS Server In Python Using Self Signed Certs</title>
        <link>http://pankajmalhotra.com/Simple-HTTPS-Server-In-Python-Using-Self-Signed-Certs</link>
        <pubDate>Sun, 07 Jun 2015 20:54:20 +0000</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;So I came across a situation where I needed to boot up an https server to host some files and guess what its really very easy to do than what I imagined.&lt;/p&gt;

&lt;h2&gt;Generate self signed certificates using OpenSSL&lt;/h2&gt;

&lt;h3&gt;Generate your server key&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ openssl genrsa -des3 -out server.key 1024
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will be prompted for a password for your key. Enter, confirm and continue.&lt;/p&gt;

&lt;h3&gt;Generate your Certificate Signing Request (CSR)&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ openssl req -new -key server.key -out server.csr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will be prompted again for your key password. Enter the one you created from step 1 above. You can then accept the defaults for all of the prompts you are presented with except the Common Name. This is key, and what makes the enhanced certificate validation happy. Since we are doing local development your common name will be &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Common Name (e.g. server FQDN or YOUR name) []:localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Generate your Certificate&lt;/h3&gt;

&lt;p&gt;Lastly we need to create our certificate. Again, use your key password and you will be all set.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ openssl x509 -req -days 1024 -in server.csr -signkey server.key -out server.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Generate a pem file&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cat server.crt server.key &amp;gt; server.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Python implementation of server:&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/usr/bin/python

import BaseHTTPServer, SimpleHTTPServer
import ssl

httpd = BaseHTTPServer.HTTPServer((&amp;#39;localhost&amp;#39;, 4443), SimpleHTTPServer.SimpleHTTPRequestHandler)
httpd.socket = ssl.wrap_socket (httpd.socket, certfile=&amp;#39;/path/to/server.pem&amp;#39;, server_side=True)
httpd.serve_forever()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;code&gt;$ python server.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Default host here is &lt;code&gt;localhost&lt;/code&gt; and port is &lt;code&gt;4443&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it ! You have finally deployed an &lt;code&gt;https&lt;/code&gt; server.
Go to &lt;code&gt;https://localhost:4443&lt;/code&gt; and click &lt;code&gt;Advanced &amp;gt; Proceed to localhost(unsafe)&lt;/code&gt; to accept certificates and see the serverd files.&lt;/p&gt;

&lt;h3&gt;Sources:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.salesforce.com/blogs/developer-relations/2011/05/generating-valid-self-signed-certificates.html&quot;&gt;Generating valid self signed certificates for localhost development&lt;/a&gt;
&lt;br/&gt;
&lt;a href=&quot;http://www.piware.de/2011/01/creating-an-https-server-in-python/&quot;&gt;Creating an HTTPS server in Python&lt;/a&gt;&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Add Two Numbers Without Using Arithmetic Operators</title>
        <link>http://pankajmalhotra.com/Add-Two-Numbers-Without-Using-Arithmetic-Operators</link>
        <pubDate>Mon, 04 May 2015 07:10:56 +0000</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;Write a function Add() that returns sum of two integers. The function should not use any of the arithmetic operators (+, ++, –, -, .. etc).&lt;/p&gt;

&lt;p&gt;Sum of two bits can be obtained by performing XOR (^) of the two bits. Carry bit can be obtained by performing AND (&amp;amp;) of two bits.
Above is simple Half Adder logic that can be used to add 2 single bits. We can extend this logic for integers. If x and y don’t have set bits at same position(s), then bitwise XOR (^) of x and y gives the sum of x and y. To incorporate common set bits also, bitwise AND (&amp;amp;) is used. Bitwise AND of x and y gives all carry bits. We calculate (x &amp;amp; y) &amp;lt;&amp;lt; 1 and add it to x ^ y to get the required result.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#include&amp;lt;stdio.h&amp;gt;

int Add(int x, int y)
{
    // Iterate till there is no carry  
    while (y != 0)
    {
        // carry now contains common set bits of x and y
        int carry = x &amp;amp; y;  

        // Sum of bits of x and y where at least one of the bits is not set
        x = x ^ y; 

        // Carry is shifted by one so that adding it to x gives the required sum
        y = carry &amp;lt;&amp;lt; 1;
    }
    return x;
}

int main()
{
    printf(&amp;quot;%d&amp;quot;, Add(15, 32));
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following is recursive implementation for the same approach.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;int Add(int x, int y)
{
    if (y == 0)
        return x;
    else
        return Add( x ^ y, (x &amp;amp; y) &amp;lt;&amp;lt; 1);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Credits : http://www.geeksforgeeks.org&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>New Algorithms and Coding Section</title>
        <link>http://pankajmalhotra.com/New-Algorithms-and-Coding-Section</link>
        <pubDate>Thu, 30 Apr 2015 14:02:15 +0000</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;Being heavily involved in Software Development and Automation from the last year, I didn&amp;#39;t get much time to do competitive programming. I used to read algorithms and research papers in free time and implement some of them or solve some interesting problem. So to share these codes today I added a new section &lt;a href=&quot;http://pankajmalhotra.com/coding&quot;&gt;coding&lt;/a&gt; to my site.&lt;/p&gt;

&lt;h2&gt;What will it contain ?&lt;/h2&gt;

&lt;p&gt;This new section will contain a very brief explanation of Algorithm or the problem and the code for implementing it. Most of the problems will be from &lt;a href=&quot;http://www.topcoder.com/&quot;&gt;TopCoder&lt;/a&gt; , &lt;a href=&quot;http://codeforces.com/&quot;&gt;CodeForces&lt;/a&gt; , &lt;a href=&quot;http://www.codechef.com/&quot;&gt;CodeChef&lt;/a&gt; , &lt;a href=&quot;https://www.hackerrank.com/&quot;&gt;HackerRank&lt;/a&gt; and &lt;a href=&quot;http://www.spoj.com/&quot;&gt;SPOJ&lt;/a&gt;. I will add some brain teasers and logic puzzles too. Since I am planning to add them frequently, so they will not be verbose.&lt;/p&gt;

&lt;p&gt;This section might also sometimes contain cool and fun scripts, So keep checking !&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Deploying Projects On AWS Using ATLAS Workflow</title>
        <link>http://pankajmalhotra.com/Deploying-Projects-On-AWS-Using-ATLAS-Workflow</link>
        <pubDate>Sat, 18 Apr 2015 04:41:38 +0000</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;In the &lt;a href=&quot;http://pankajmalhotra.com/Infrastructure-Automation-Using-Terraform-Packer-Consul-Atlas/&quot;&gt;last&lt;/a&gt; post I talked about Infrastructure automation and gave a brief introduction about tools like Terraform, Packer, Consul and also talked about ATLAS and the workflow for deploying deploying infrastructure using it.&lt;/p&gt;

&lt;p&gt;Today I am gonna get into details on how to actually deploy projects like a LAMP server, Wordpress, Discourse, Docker on AWS using Atlas workflow and how to generate and associate RSA keys and security group to SSH into any of your machines.&lt;/p&gt;

&lt;p&gt;Most of the informtion is in linked guides for each of the projects, I&amp;#39;ll concentrate on main parts and things to pay special attention to.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://atlas.hashicorp.com/help/getting-started/getting-started-overview&quot;&gt;getting-started&lt;/a&gt; guide gives a very good idea about how things work and practically explains the complete ATLAS workflow with a very easy example.&lt;/p&gt;

&lt;h2&gt;Deploying Wordpress on AWS&lt;/h2&gt;

&lt;p&gt;Main thing to note on this tutorial is that you have to deploy database on a separate node since the aws instance gets rebuild everytime you push a new version of you application or make any configuration changes, so to preserve the application data its advised to deploy database on a separate node. We are using Consul here as a service discovery tool so that we get to get information about our application and databse server. So you don&amp;#39;t have to hardcode any ip address or any other other resource attached to a particular service.&lt;/p&gt;

&lt;p&gt;Since we are using Consul here, we will have to allow &lt;code&gt;udp&lt;/code&gt; traffic on the port which Consul is running. As mentioned consul uses a &lt;code&gt;gossip&lt;/code&gt; protocol to establish communication between services.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hashicorp/atlas-examples/tree/master/wordpress&quot;&gt;Link to tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Using Travis to push Application code to ATLAS&lt;/h2&gt;

&lt;p&gt;As the name suggests this is an example demonstarting how to push application code to ATLAS from Travis. Here we use &lt;a href=&quot;https://github.com/hashicorp/atlas-upload-cli&quot;&gt;ATLAS Upload CLI&lt;/a&gt;, a simple utility to push application code to Atlas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hashicorp/atlas-examples/tree/master/TravisCI&quot;&gt;Link to tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;SSH in an AWS Instance&lt;/h2&gt;

&lt;p&gt;If you are setting up a production infrastructure, its advised not to allow any ports open or leave any authentication keys in aws instance but surely for debugging purpose you need to sometimes SSH in the instance you created using ATLAS workflow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hashicorp/atlas-examples/blob/master/AWS-SSH-Setup/ssh.md&quot;&gt;Link to tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Deploy Docker Container on AWS&lt;/h2&gt;

&lt;p&gt;Support for Docker provider is released in recent version of terraform &lt;code&gt;0.4&lt;/code&gt;, it still lacks some of requirements but the work is under progress and more features are expected to be released in upcoming versions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bitgeeky/atlas-examples/tree/docker/Docker&quot;&gt;Link to tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Deploy Discourse on AWS&lt;/h2&gt;

&lt;p&gt;Discourse uses docker and does a lot of bootstraping to the instance before deploying the actual application code. So its advised to follow their official guide and treat the bootstraping part as a black box to avoid breaking anything.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bitgeeky/atlas-examples/tree/discourse/Discourse&quot;&gt;Link to tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many other examples in official HashiCorp&amp;#39;s &lt;a href=&quot;https://github.com/hashicorp/atlas-examples&quot;&gt;ATLAS Examples&lt;/a&gt; respository on GitHub. I would recommend to go through some of them to get a good grip of how things work. &lt;/p&gt;

&lt;p&gt;If you think any project is missing feel free to raise an issue or You Can Add One Too !&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Infrastructure Automation Using Terraform, Packer, Consul and ATLAS Workflow</title>
        <link>http://pankajmalhotra.com/Infrastructure-Automation-Using-Terraform-Packer-Consul-Atlas</link>
        <pubDate>Fri, 17 Apr 2015 03:35:19 +0000</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;I have been working as a software contractor for HashiCorp for over a month now. My main work is to write examples for HashiCorp &lt;a href=&quot;https://atlas.hashicorp.com/&quot;&gt;ATLAS&lt;/a&gt; which is an upcoming product from HashiCorp and is under tech review at the moment. During this time I got to work on tools like Terraform, Packer and Consul. These tools are all from HashiCorp. In this blog post I&amp;#39;ll describe briefly what each of these tools is used for and about the examples I wrote for Atlas.&lt;/p&gt;

&lt;h2&gt;What is Infrastructure Automation ?&lt;/h2&gt;

&lt;p&gt;As the name suggests its automating the process of creating vm&amp;#39;s, managing load balancers, security groups, ssh-keys, ip-address and all the other resources that are associated with the machine or container.
When the size of data centres is large and it consists of hundreds or thousands of nodes and servers its impossible to handle these resources manually. So you need an automation tool that would do the work for you and to preserve all the infrastructure as a code, configuration files to be more precise. Based on the infrastructure configuration and the commands you pass every thing in cloud can be controlled using the automation tool.&lt;/p&gt;

&lt;h2&gt;What is Terraform ?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; is an Infrastructure automation tool used to store infrastructure as code. Its written in &lt;code&gt;go&lt;/code&gt; and has its own syntax for writing infrastructure configuration using &lt;code&gt;*.tf&lt;/code&gt; file. A sample terraform file looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;provider &amp;quot;aws&amp;quot; {
    access_key = &amp;quot;ACCESS_KEY_HERE&amp;quot;
    secret_key = &amp;quot;SECRET_KEY_HERE&amp;quot;
    region = &amp;quot;us-east-1&amp;quot;
}

resource &amp;quot;aws_instance&amp;quot; &amp;quot;web&amp;quot; {
    instance_type = &amp;quot;t1.micro&amp;quot;
    ami = &amp;quot;ami-408c7f28&amp;quot;

    # This will create 1 instances
    count = 1
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you can specify the priver AWS in this case and specify the resources you want to create on that provider like &lt;code&gt;aws_instance&lt;/code&gt; in this case. On running &lt;code&gt;$ terraform plan&lt;/code&gt; you can check the validity of your terraform configuration, it will give an error if there is any syntax issue, resource dependency issues and performs validation of resources, credentials etc but the actual output you get on running &lt;code&gt;$ terraform apply&lt;/code&gt; - which actually deploys these resources might differ from the output of &lt;code&gt;$ terraform plan&lt;/code&gt; in some cases.&lt;/p&gt;

&lt;p&gt;So running &lt;code&gt;$ terraform apply&lt;/code&gt; on this will create an aws instance with specified configuration. It actually creates a graph on backend to check for resource dependencies and you can get the graph using the commnd &lt;code&gt;$ terraform graph&lt;/code&gt;. If anything goes wrong you can run &lt;code&gt;$ terraform destroy&lt;/code&gt; to destroy the complete infrastructure.&lt;/p&gt;

&lt;p&gt;It comes with support from a lot of service providers AWS, Azure, Digital Ocean, Heroku, Google Cloud, Docker etc. All these service providers actually provide api&amp;#39;s to communicate with their services and terraform provides an abstarction layer over these api&amp;#39;s along with other very useful features.&lt;/p&gt;

&lt;p&gt;This is a very small example to just give an idea what terraform is all about, you should see the &lt;a href=&quot;https://www.terraform.io/docs/index.html&quot;&gt;official docmentation&lt;/a&gt; for many other features that it offers. It has developed a very good community also you can visit &lt;code&gt;#terraform-tool&lt;/code&gt; on freenode to ask any doubts etc.&lt;/p&gt;

&lt;h2&gt;What is Packer ?&lt;/h2&gt;

&lt;p&gt;Writing terraform files can get a lot complex sometimes when you need to install some packages on your machine or make a particular setup on the machine you just created. Its always advised to machine a machine image for whatever you want to do. In the machine image you can specify the packages you want to install on the machine, configuration you need to make before the machine actually gets created or scripts you want to execute after you create the machine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.packer.io/&quot;&gt;Packer&lt;/a&gt; allows you to deal with this task of creating machine images so that they can be deployed cross platform on multiple resource providers parallely. Its also written in &lt;code&gt;go&lt;/code&gt; and all the image configuration can be written in a simple &lt;code&gt;json&lt;/code&gt; format. A sample configuration looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
  &amp;quot;variables&amp;quot;: {
    &amp;quot;aws_access_key&amp;quot;: &amp;quot;ACCESS_KEY_HERE&amp;quot;,
    &amp;quot;aws_secret_key&amp;quot;: &amp;quot;SECRET_KEY_HERE&amp;quot;
  },
  &amp;quot;builders&amp;quot;: [{
    &amp;quot;type&amp;quot;: &amp;quot;amazon-ebs&amp;quot;,
    &amp;quot;access_key&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;secret_key&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;region&amp;quot;: &amp;quot;us-east-1&amp;quot;,
    &amp;quot;source_ami&amp;quot;: &amp;quot;ami-9eaa1cf6&amp;quot;,
    &amp;quot;instance_type&amp;quot;: &amp;quot;t2.micro&amp;quot;,
    &amp;quot;ssh_username&amp;quot;: &amp;quot;ubuntu&amp;quot;,
    &amp;quot;ami_name&amp;quot;: &amp;quot;packer-example &amp;quot;
  }]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similar to &lt;code&gt;$ terraform plan&lt;/code&gt; you can validate the configuration using &lt;code&gt;$ packer validate example.json&lt;/code&gt; and the run &lt;code&gt;$ packer build example.json&lt;/code&gt; to actually create the machine image.&lt;/p&gt;

&lt;h2&gt;What is ATLAS ?&lt;/h2&gt;

&lt;p&gt;So now you have the machine images and your terraform deployment configurations. Lets say, you want to share your infrastructure with one of the team members or you need a place to host the machine images, develop your infrastructure further and then deploy it immediately. This is what ATLAS is designed for. It provides a platform to perform all these operations at a single place.&lt;/p&gt;

&lt;p&gt;I would describe &lt;a href=&quot;http://atlas.hashicorp.com/&quot;&gt;ATLAS&lt;/a&gt; as a utility to store and share your infrastrucutre. Like you can share and develop your application code on GitHub, ATLAS provides a platform to develop and share you infrastructure while providing instant deployment option.&lt;/p&gt;

&lt;p&gt;The workflow of ATLAS is like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create machine images using Packer and push them to Atlas.&lt;/li&gt;
&lt;li&gt;Push the application code to Atlas. You can use a vagrant box for this.&lt;/li&gt;
&lt;li&gt;Link application code to infrastructure images.&lt;/li&gt;
&lt;li&gt;Deploy Atlas artifacts using Terraform on cloud.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;What is Consul ?&lt;/h2&gt;

&lt;p&gt;Now that the infrastructure is up and running, how do we find that all nodes in our infrastrucure are behaving as expected and are up and running ? In another case say you deployed database on one of the nodes and application on the other one, now how does one nodes comes to know about other ? How can the application and database nodes communicate with each other ?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://consul.io/&quot;&gt;Consul&lt;/a&gt; provides a solution to these problems. Its basically a service discovery and health monitoring tool. Apart from this it can also be used as a Key/Value Storage and it can work across multi datacenters. So the nodes monitored by consul need not be present in the same datacenter. Its based on the &lt;code&gt;gossip&lt;/code&gt; protocol which itself utilises &lt;code&gt;udp&lt;/code&gt; for data transfer.&lt;/p&gt;

&lt;p&gt;So these are the interesting things I am working on. Apart from these I also worked on Docker containers and Vagrant boxes but those are quite common now.&lt;/p&gt;

&lt;h2&gt;What examples I wrote ?&lt;/h2&gt;

&lt;p&gt;I wrote a couple of examples on how to deploy Wordpress, link Travis, deploy Docker, Discourse and tutorials on getting SSH access to the machines in infractructure using the ATLAS workflow. I will give a brief introduction and link for each of these in the next blog post.&lt;/p&gt;
</description>
      </item>
    
  </channel>
</rss>
