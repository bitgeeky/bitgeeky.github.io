<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pankaj Malhotra</title>
    <link>http://pankajmalhotra.com</link>
    <atom:link href="http://pankajmalhotra.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>Pankaj Malhotra aka bitgeeky's blog on Automation, Web QA, Web Development, Algorithms, Coding and his life.</description>
    <language>en-us</language>
    <pubDate>Sat, 22 Oct 2016 22:27:05 +0530</pubDate>
    <lastBuildDate>Sat, 22 Oct 2016 22:27:05 +0530</lastBuildDate>

    
      <item>
        <title>Making My GSoC 2014 Project Proposal Public</title>
        <link>http://pankajmalhotra.com/Making-My-GSoC-2014-Project-Proposal-Public</link>
        <pubDate>Mon, 21 Mar 2016 04:56:12 +0530</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;Many of my juniors are applying for Google Summer of Code this year, and I have been giving them few tips on how to write a good proposal. I decided to make my own proposal public so that anyone who wants to get some hints can go through it. I spent a lot of time writing this proposal and I am thankful to my project mentor and team manager for their helpful quality reviews.&lt;/p&gt;

&lt;p&gt;Although this proposal is two years old since I applied in 2014, but most of the points will still be useful since there hasn&amp;#39;t been much change in program since then.&lt;/p&gt;

&lt;iframe src=&quot;https://drive.google.com/file/d/0B49J04vfEogldmpoMjZOdlVqcFE/preview&quot; width=&quot;100%&quot; height=&quot;900&quot;&gt;&lt;/iframe&gt;
</description>
      </item>
    
      <item>
        <title>Dynamic Resource Management in IaaS Cloud</title>
        <link>http://pankajmalhotra.com/Dynamic-Resource-Management-in-IaaS-Cloud</link>
        <pubDate>Thu, 17 Dec 2015 20:30:00 +0530</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;Few months back, I started working on a problem to dynamically manage resources in an Infrastructure as a Service platform, I wanted to build a model that would scale infrastrcuture based on application needs, and would help to reduce the cost and resource over utilization for the infrastructure provider and make the application robust by providing right amount of resources at the right time.&lt;/p&gt;

&lt;p&gt;Due to academic workload and deadlines I had to shift my focus and adjust my priorities, thus moving away from the project. I am not entirely sure if and when I will be able to get back to this project, so I am making my research, explorations and experiments public in form of a summary/report, so that someone else working on the same problem would be able to make good use of my study and can continue from the point where I left.&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;6ee5dbc85fe94574bb6ce9f42dbb0b44&quot; data-ratio=&quot;0.772830188679245&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
</description>
      </item>
    
      <item>
        <title>JSFoo 2015 Conference and Workshops on JavaScript</title>
        <link>http://pankajmalhotra.com/JSFoo-2015-Conference-and-Workshops-on-JavaScript</link>
        <pubDate>Fri, 18 Sep 2015 06:14:52 +0530</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;h2&gt;Enjoying weather sitting outside airport&lt;/h2&gt;

&lt;h5&gt;Friday 2015-09-20&lt;/h5&gt;

&lt;p&gt;Sitting outside airport, having a cup of tea. It&amp;#39;s still raining, weather is really good. I have started feeling a little bit cold now. I really like this kind of a place, seeing people passing by, some are coming, some are leaving and some sitting beside me filling their appetite, all kind of people from different age groups.&lt;/p&gt;

&lt;h2&gt;It started raining&lt;/h2&gt;

&lt;h5&gt;Friday 2015-09-20&lt;/h5&gt;

&lt;p&gt;It has started raining now, planning to leave for airport.
&lt;img src=&quot;http://i.imgur.com/dsg28Kj.jpg&quot; alt=&quot;It started raining&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Tikki Tikki&lt;/h2&gt;

&lt;h5&gt;Friday 2015-09-20&lt;/h5&gt;

&lt;p&gt;We had to checkout at 12 pm. Left the hotel to explore city, having some snacks at a place called Tikki Tikki, it&amp;#39;s a snack made of pita bread pocket filled with cutlet, veggies and some tasty sauces.
&lt;img src=&quot;http://i.imgur.com/Fub28DE.jpg&quot; alt=&quot;Tikki Tikki&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;We are in a Book Fair&lt;/h2&gt;

&lt;h5&gt;Friday 2015-09-20&lt;/h5&gt;

&lt;p&gt;Looks like my idea of exploring the city is working out well. I just saw a banner titled Book Fair, and didn&amp;#39;t take a moment to go inside.
&lt;img src=&quot;http://i.imgur.com/54Du7uB.jpg&quot; alt=&quot;We are in a Book Fair&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Getting ready for the day&lt;/h2&gt;

&lt;h5&gt;Friday 2015-09-20&lt;/h5&gt;

&lt;p&gt;I am planning to explore the city, and skipping NodeBots &amp;amp; JS Hardware Workshop. I hope I don&amp;#39;t regret it later.
&lt;img src=&quot;http://i.imgur.com/yT5rbzs.jpg&quot; alt=&quot;Getting ready for the day&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Guillermo Rauch live on stage&lt;/h2&gt;

&lt;h5&gt;Friday 2015-09-19&lt;/h5&gt;

&lt;p&gt;Creator of Socket.IO talks on future of Chat and Rich Realtime JavaScript application
&lt;img src=&quot;http://i.imgur.com/fxBYyr6.jpg&quot; alt=&quot;Guillermo Rauch live on stage&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Droids, JavaScript and Web Connected Hardware&lt;/h2&gt;

&lt;h5&gt;Friday 2015-09-19&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/IPR6dnQ.jpg&quot; alt=&quot;Droids, JavaScript and Web Connected Hardware&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Nice use of Web Audio API&lt;/h2&gt;

&lt;h5&gt;Friday 2015-09-19&lt;/h5&gt;

&lt;p&gt;These guys are playing live Djembe and filling the hall with music. They are using Web Audio API to capture sound signals and P5.js to visualze the music and beat being played. They are going to talk about the algorithm they are using to perfectly capture and process sound signals.
&lt;img src=&quot;http://i.imgur.com/PYnqSP6.jpg&quot; alt=&quot;Nice use of Web Audio API&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Mathias Talk on RegExp and Unicode&lt;/h2&gt;

&lt;h5&gt;Friday 2015-09-18&lt;/h5&gt;

&lt;p&gt;A very good talk on how unicode can be pain with RegExp and how &lt;code&gt;u&lt;/code&gt; flag in ES6 helps solve the problem.
&lt;img src=&quot;http://i.imgur.com/gnseXuA.jpg&quot; alt=&quot;Mathias Talk on RegExp and Unicode&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Welcome Board&lt;/h2&gt;

&lt;h5&gt;Friday 2015-09-18&lt;/h5&gt;

&lt;p&gt;Its actually a very huge board, I&amp;#39;ll capture a small part of it.
&lt;img src=&quot;http://i.imgur.com/m9AIzoG.jpg&quot; alt=&quot;Welcome Board&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Sunshine&lt;/h2&gt;

&lt;h5&gt;Friday 2015-09-18&lt;/h5&gt;

&lt;p&gt;I got a window seat, on the emergency exit door with an extra leg space, so comfortable.
&lt;img src=&quot;http://i.imgur.com/pF3mxWP.jpg&quot; alt=&quot;Sunshine&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Ready to board&lt;/h2&gt;

&lt;h5&gt;Friday 2015-09-18&lt;/h5&gt;

&lt;p&gt;It&amp;#39;s very calm and silent today, the sun hasn&amp;#39;t risen yet. Waiting to board the plane. Will be taking off for bengaluru in a few more minutes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/879UMbF.jpg&quot; alt=&quot;Plane&quot; /&gt;&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>My Talk Proposal for JSFoo 2015 - Debugging Javascript on Mobile Browsers</title>
        <link>http://pankajmalhotra.com/My-Talk-Proposal-for-JSFoo-2015-Debugging-Javascript-on-Mobile-Browsers</link>
        <pubDate>Tue, 04 Aug 2015 06:14:52 +0530</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;Here is a proposal of my talk titled &amp;quot;Debugging Javascript on Mobile-Browsers&amp;quot; for JSFoo 2015. It covers a major part of the research work I did while interning with Mobile team at BrowserStack.&lt;/p&gt;

&lt;p&gt;Although the tools mentioned in this talk are for general Mobile Web Debugging which provide JS Debugging, Element Inspection, Network, Resources, Sources, Profiling etc depending on tool, but in the talk I&amp;#39;ll mainly concentrate on JS Debugging.&lt;/p&gt;

&lt;h1&gt;Link to Proposal&lt;/h1&gt;

&lt;p&gt;https://jsfoo.talkfunnel.com/2015/48-debugging-javascript-on-mobile-browsers&lt;/p&gt;

&lt;h1&gt;Gist of Talk&lt;/h1&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ngedIOe4Eiw&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;Slides for Talk&lt;/h1&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;c0422e727ba043babcacf30a5060bfb0&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I wish it gets selected, and I get a chance to speak at JSFoo this year.
This is a completely fresh set of slides, so do suggest any modifications so that it can be made better.&lt;/p&gt;

&lt;p&gt;Drop me a mail if you want me to speak at your event/conference on &amp;quot;Mobile Web Debugging&amp;quot;.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>GoSprint and GoRhythms - Algorithms In GoLang</title>
        <link>http://pankajmalhotra.com/GoSprint-And-GoRhythms-Algorithms-In-GoLang</link>
        <pubDate>Sat, 01 Aug 2015 02:01:35 +0530</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;Few weeks back I started a new section called &lt;code&gt;coding&lt;/code&gt; on my blog. If you follow my blog you would have seen that there wasn&amp;#39;t much activity and posts around that section as promised.
Its not that I have stoppped reading algorithms and just doing so called &lt;code&gt;cool&lt;/code&gt; stuff, the reason for not making regular posts in that section is that most of the times when I read an algorithm, its implementation in C++ is given along with it. So writing the same code again isn&amp;#39;t interesting, but I feel like implementing the algorithm and make a blog post whenever I read something new.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/gopher.png&quot; alt=&quot;Gophers&quot; style=&quot;float:left; margin-right:20px; margin-top:15px; width: 40%; height: 40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To deal with this problem, I am planning to do a &lt;code&gt;GoSprint&lt;/code&gt;. In coming days whatever algorithm I read I&amp;#39;ll post Go source code for its imlementation. This will allow me to implement the algorithm I read and also help me get a better grip on language.&lt;/p&gt;

&lt;p&gt;I initiated a repository &lt;a href=&quot;https://github.com/bitgeeky/GoRhythms&quot;&gt;GoRhythms&lt;/a&gt; on GitHub which will contain all the code snippets, also I am renaming the &lt;code&gt;coding&lt;/code&gt; section on my blog to &lt;code&gt;GoRhythms&lt;/code&gt; since all the algorithms will now be posted under this section.&lt;/p&gt;

&lt;p&gt;Shout out to all the Gophers out there, pull requests welcomed !&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Skip SSL HostName Verification Java HttpsURLConnection</title>
        <link>http://pankajmalhotra.com/Skip-SSL-HostName-Verification-Java-HttpsURLConnection</link>
        <pubDate>Tue, 28 Jul 2015 02:09:10 +0530</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;There might arise a situation when you have to make a secure request to a server with certificates that do not have host name to which you are making a request.&lt;/p&gt;

&lt;p&gt;For example a certificate generated for &lt;code&gt;https://example.com&lt;/code&gt; might not support its ip address &lt;code&gt;https://ex.com.ip.add&lt;/code&gt; as a valid host name.&lt;/p&gt;

&lt;p&gt;PS: This situation is different from errors arrising from invalid or self signed certificates. This situation arrises when certificates are valid but the host name verification fails.&lt;/p&gt;

&lt;p&gt;You might see an error like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;java.io.IOException: Hostname &#39;0.0.0.0&#39; was not verified
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where in place of &lt;code&gt;0.0.0.0&lt;/code&gt; its the server&amp;#39;s ip address.&lt;/p&gt;

&lt;p&gt;In such a situation all you need to do is to skip host name verification for the URL connection. You can Override the default &lt;code&gt;HostnameVerifier&lt;/code&gt; with a custom verifier to add exception for the host you are making request to.&lt;/p&gt;

&lt;p&gt;This should be done only if you are confident that the server you are sending request to doesn&amp;#39;t has any kind of security issues, because when you skip host name verification there is actually no point of &lt;code&gt;HTTPS/SSL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a particular host you can write a custom &lt;code&gt;HostnameVerifier&lt;/code&gt; like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;HostnameVerifier hostnameVerifier = new HostnameVerifier() {
    @Override
    public boolean verify(String hostname, SSLSession session) {
        HostnameVerifier hv =
            HttpsURLConnection.getDefaultHostnameVerifier();
        return hv.verify(&quot;hostname&quot;, session);
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or just &lt;code&gt;return true&lt;/code&gt; if you want to skip for all hosts on a particular URL connection.&lt;/p&gt;

&lt;p&gt;A sample code that fetches JSON data using such request:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;import android.util.Log;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.Exception;
import java.net.URL;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSession;

public class SkipVerification implements Runnable {

    private static final String TAG = SkipVerification.class.toString();
    private String server_port;
    private String serverIP;

    public SkipVerification(String serverIP, String server_port){
        this.serverIP = serverIP;
        this.server_port = server_port;
    }

    public void run() {
        try {
            HostnameVerifier hostnameVerifier = new HostnameVerifier() {
                @Override
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            };

            URL url = new URL(&quot;https://&quot; + serverIP + &quot;:&quot; + server_port + &quot;/json&quot;);
            InputStream inStream = null;

            try {
                HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();
                urlConnection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;);
                urlConnection.setHostnameVerifier(hostnameVerifier);
                inStream = urlConnection.getInputStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(inStream));
            } catch (Exception e) {
                Log.e(TAG, &quot;error fetching data from server&quot;, e);
            } finally {
                if (inStream != null) {
                    inStream.close();
                }
            }
        } catch (Exception e) {
            Log.e(TAG, &quot;error initializing SkipVerificationn thread&quot;, e);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above code makes a &lt;code&gt;https&lt;/code&gt; request to a server whose certificate doesn&amp;#39;t have an entry of its ip address as a verified hostname. The custom &lt;code&gt;HostnameVerifier&lt;/code&gt; skips any kind of hostname verification particular to a &lt;code&gt;HttpsURLConnection&lt;/code&gt;.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Retrieving Safari History From JailBroken IOS Device</title>
        <link>http://pankajmalhotra.com/Retrieving-Safari-History-From-JailBroken-IOS-Device</link>
        <pubDate>Sun, 28 Jun 2015 12:40:58 +0530</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;h3&gt;This post is for Jail Broken devices and tested on IOS 8.1.2.&lt;/h3&gt;

&lt;p&gt;This post explains how to retrieve safari history database from a jail broken ios device. Its a sqlite3 database file which contains all history data but the challenge is that there is no specific path on which the files exist, so you will have to first find the files.&lt;/p&gt;

&lt;p&gt;1 Install OpenSSH on your jailbroken device (through Cydia).&lt;/p&gt;

&lt;p&gt;2 Find History.db* files&lt;/p&gt;

&lt;p&gt;Application data for most applications reside in subdirectories under:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;/private/var/mobile/Containers/Data/Application/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The files which contain safari history data are:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;History.db
History.db-shm
History.db-wal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To find path to these files just do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ find /private/var/mobile/Containers/Data/Application -iname &#39;History.db*&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3 SCP files to a local location&lt;/p&gt;

&lt;p&gt;Basically to get the data from these files you need &lt;code&gt;sqlite3&lt;/code&gt;. You can either install &lt;code&gt;sqlite3&lt;/code&gt; app from cydia to the mobile or better just scp the datbase files to machine you are working on.&lt;/p&gt;

&lt;p&gt;You can copy the files one by one or better use &lt;code&gt;sshpass&lt;/code&gt; and &lt;code&gt;xargs&lt;/code&gt; to copy all files at one go like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ sshpass -p &#39;alpine&#39; ssh  root@mobile_ip &quot;find /private/var/mobile/Containers/Data/Application -name &#39;History.db*&#39;&quot; \
    | xargs -I{} \
    sshpass -p &#39;alpine&#39; scp -P $SSH_PORT root@mobile_ip:&#39;{}&#39; /path/to/tmp/db/on/local/machine;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4 Load the sqlite database&lt;/p&gt;

&lt;p&gt;If you change your working directory to the directory containing &lt;code&gt;History.db*&lt;/code&gt; files and do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ sqlite3 History.db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will load sqlite3 database and now you can get any data you want about browser history.&lt;/p&gt;

&lt;p&gt;5 Example query to get latest page visited:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;gt; select url from history_items where id in( select history_item from history_visits order by visit_time desc limit 1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it ! Now you can just play around and get stats like number of times and time when a website was visited and much more.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Start App Service At BootUp On JailBroken IOS Device</title>
        <link>http://pankajmalhotra.com/Start-App-Service-At-BootUp-On-JailBroken-IOS-Device</link>
        <pubDate>Sat, 27 Jun 2015 12:49:35 +0530</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;h3&gt;This post is for Jail Broken devices and tested on IOS 8.1.2.&lt;/h3&gt;

&lt;p&gt;To start an application or service everytime on device boot up just follow these simple steps:&lt;/p&gt;

&lt;p&gt;1 Install OpenSSH on your jailbroken device (through Cydia).&lt;/p&gt;

&lt;p&gt;2 Write a boot script for your application or service.
This can be anything as simpler as a bash script or anything that launches your app.&lt;/p&gt;

&lt;p&gt;3 Write a plist for application. An example plist for application is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple Computer//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;plist&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.example.BackgroundService&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/path/to/program/eg/bin/bash&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;path/to/launchscript/eg/root/BackgroundService&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StandardErrorPath&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/var/logs/BackgroundService.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StandardOutPath&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/tmp/BackgroundService.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can name it anything for example &lt;code&gt;com.example.BackgroundService.plist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4 Copy the &lt;code&gt;plist&lt;/code&gt; file to &lt;code&gt;/Library/LaunchDaemons/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;5 Load the &lt;code&gt;plist&lt;/code&gt; using:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ launchctl load /Library/LaunchDaemons/com.example.BackgroundService.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it ! Now every time you boot up the device your service will start running automatically.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Websockets SSL/TLS Termination Using NGINX Proxy</title>
        <link>http://pankajmalhotra.com/Websockets-SSL-TLS-Termination-Using-NGINX-Proxy</link>
        <pubDate>Sun, 14 Jun 2015 14:47:00 +0530</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;There can be a situation where your application is configured to communicate via websockets protocol &lt;code&gt;ws&lt;/code&gt; and you want to expose it over the internet while still keeping the client side secure by SSL/TLS or say the client will always get an &lt;code&gt;HTTPS&lt;/code&gt; page.&lt;/p&gt;

&lt;p&gt;In such a situation the &lt;code&gt;HTTPS&lt;/code&gt; page won&amp;#39;t allow insecure content to be present on the page so you need a &lt;code&gt;wss&lt;/code&gt; protocol, but in my case I had no control over the application server. So a solution to such a problem is to use a SSL/TLS terminator in between the application server and the client.&lt;/p&gt;

&lt;p&gt;There are a few options which act as a websockets proxy, I decided to use NGINX because of the variety of options it provides such as listening mutiple ports, allowing multiple upstreams, support for unix sockets and a bunch of other features without comprimising the performace parameters.&lt;/p&gt;

&lt;p&gt;The final architecture after using NGINX as a websockets proxy is:
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/public/images/nginx.png&quot; alt=&quot;NGINX Proxy&quot; style=&quot;margin-right:15px; width: 100%; height: 100%&quot; /&gt;
&lt;br/&gt;
We use secure websockets communication on client side using the &lt;code&gt;wss&lt;/code&gt; protocol and inbetween client and application server is a NGINX proxy server which allows to terminate the SSL/TLS connection and establishes an insecure connection using &lt;code&gt;ws&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;All that is needed to convert an instance of NGINX to a proxy server is a few changes in configuration file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;map $http_upgrade $connection_upgrade {
    default upgrade;
    &#39;&#39; close;
}

upstream appserver {
    server 192.168.100.10:9222; # appserver_ip:ws_port
}

server {
    listen 8888; // client_wss_port

    ssl on;
    ssl_certificate /path/to/crt;
    ssl_certificate_key /path/to/key;


    location / {
        proxy_pass http://appserver;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above configuration should be within &lt;code&gt;http{ }&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;Replace the &lt;code&gt;appserver_ip&lt;/code&gt; and &lt;code&gt;ws_port&lt;/code&gt; with the ip and port of your application server, &lt;code&gt;client_wss_port&lt;/code&gt; with the port on which client makes a &lt;code&gt;wss&lt;/code&gt; connection and provide paths to certificate/key.&lt;/p&gt;

&lt;p&gt;Just reload the NGINX configuration or restart the server to get everything up and running.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Injecting Javascript In HTML Content Using MITM Proxy</title>
        <link>http://pankajmalhotra.com/Injecting-Javascript-In-HTML-Content-Using-MITM-Proxy</link>
        <pubDate>Tue, 09 Jun 2015 03:13:10 +0530</pubDate>
        <author>Pankaj Malhotra</author>
        <description>&lt;p&gt;Its been a few days that I have been learning about Man In The Middle MITM proxy, my use case was to inject a simple javascript to html pages that users open behind proxy server.&lt;/p&gt;

&lt;p&gt;It actually involves a bit insight on how to do this, and a few small challenges. Here I describe the solutions I found to do this:&lt;/p&gt;

&lt;h2&gt;What is MITM proxy ?&lt;/h2&gt;

&lt;p&gt;An interactive console program that allows traffic flows to be intercepted, inspected, modified and replayed.
So basically it gives the proxy administartor the power to modify any traffic that goes through the proxy. You can play with html content, inject elements, get header data, modify headers, dns spoofing, traffic filteration, redirection and a lot more things you can do with mitmproxy.
&lt;br/&gt;
&lt;a href=&quot;https://github.com/mitmproxy/mitmproxy/tree/master/examples&quot;&gt;Example scripts for doing experimentation&lt;/a&gt;
&lt;br/&gt;
For more information visit &lt;a href=&quot;https://mitmproxy.org/&quot;&gt;mitmproxy official website&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;For OS X its distributed as a homebrew package and is really simple to install, just do &lt;code&gt;$ brew install mitmproxy&lt;/code&gt;.
For troubleshooting and setting environment variables have a look at the &lt;a href=&quot;https://mitmproxy.org/doc/install.html&quot;&gt;installation guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure you have all the certificates used by mitm proxy in &lt;code&gt;~/.mitmproxy/&lt;/code&gt;. Install certificates on browser by browsing to &lt;code&gt;mitm.it&lt;/code&gt;. If the traffic is passing through the proxy server this page will show you options to install certificates, just select the platform you are browsing on.  For more information about generating and installing certificates see &lt;a href=&quot;https://mitmproxy.org/doc/certinstall.html&quot;&gt;about cerificates&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Running&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ mitmproxy -p port_number
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The default port on which proxy server runs is &lt;code&gt;8080&lt;/code&gt; but you can specify the &lt;code&gt;port_number&lt;/code&gt; by using &lt;code&gt;-p&lt;/code&gt; flag. It will open up a window showing traffic passing through proxy.&lt;/p&gt;

&lt;p&gt;Configure browser to use proxy server by specifying host as &lt;code&gt;localhost&lt;/code&gt; and the port on which proxy server is listening.
You will start seeing requests though the proxy and traffic passing through it.
&lt;img src=&quot;/public/images/mitmproxy.png&quot; alt=&quot;MITM Console&quot; style=&quot;margin-right:15px; width: 100%; height: 100%&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Modifying traffic passing through proxy&lt;/h2&gt;

&lt;p&gt;You can pass scripts as arguments while running proxy server which will modify the traffic according to the logic you specify in script.
The script will operate on each request passing through proxy, and will make the desired modification.&lt;/p&gt;

&lt;h3&gt;Inline Scripts&lt;/h3&gt;

&lt;p&gt;Basic Structure of an Inline script is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;def on_event(context, flow):
    some_logic
    another_logic
    do_something
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first argument to each event method is an instance of ScriptContext that lets the script interact with the global mitmproxy state. 
&lt;code&gt;on_event&lt;/code&gt; can be an event like request, response, start, clientconnect, serverconnect or any other event from this &lt;a href=&quot;https://mitmproxy.org/doc/scripting/inlinescripts.html&quot;&gt;list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Script to inject javascript to html content:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# Usage: mitmdump -s &quot;js_injector.py src&quot;
# (this script works best with --anticache)
from bs4 import BeautifulSoup
from libmproxy.protocol.http import decoded

# On start of proxy server ask for src as an argument
def start(context, argv):
    if len(argv) != 2:
        raise ValueError(&#39;Usage: -s &quot;js_injector.py src&quot;&#39;)
    context.src_url = argv[1]


def response(context, flow):
    if flow.request.host in context.src_url:
        return # Make sure JS isn&#39;t injected to itself
    with decoded(flow.response):  # Remove content encoding (gzip, ...)
        html = BeautifulSoup(flow.response.content)
        if html.body:
            script = html.new_tag(
                &quot;script&quot;,
                src=context.src_url,
                type=&#39;application/javascript&#39;)
            html.body.insert(0, script)
            flow.response.content = str(html)
            context.log(&quot;Script injected.&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the mitm proxy using:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ mitmdump -p 8888 -s &quot;js_injector.py http://path/to/src.js&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: that we are using &lt;code&gt;mitmdump&lt;/code&gt; istead of &lt;code&gt;mitmproxy&lt;/code&gt; for getting more detailed output.&lt;/p&gt;

&lt;p&gt;Note: If you want to inject javascript in an &lt;code&gt;https&lt;/code&gt; website, your javascript file must also be hosted on &lt;code&gt;https&lt;/code&gt; server.&lt;/p&gt;

&lt;p&gt;So far so good:
Now open the url in browser configured to use proxy server, you should see a broken website.&lt;/p&gt;

&lt;h3&gt;Any guess why the website is broken ?&lt;/h3&gt;

&lt;p&gt;The website is broken because in previous script our javascript is getting injected on every resource on page having &lt;code&gt;html.body&lt;/code&gt; which should not be the case.&lt;/p&gt;

&lt;p&gt;Replace:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;-- if html.body:
with
++ if html.body and (&#39;text/html&#39; in flow.response.headers[&quot;content-type&quot;][0]):
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to make sure only requests with &lt;code&gt;text/html&lt;/code&gt; in their header get js injection.&lt;/p&gt;

&lt;p&gt;Try to open the page again, it should now open fine with &lt;em&gt;almost&lt;/em&gt; all resources loading properly.&lt;/p&gt;

&lt;h3&gt;So why &lt;em&gt;almost&lt;/em&gt; all and not &lt;em&gt;ALL&lt;/em&gt; ? Try to figure it out and read further:&lt;/h3&gt;

&lt;p&gt;The reason is that an html page has multiple resources that can be of type text/html for example an iframe loading content from an external resource. But we want to inject our js only to the page that is opened by user at current time i.e the main page.&lt;/p&gt;

&lt;p&gt;Its not possible to do this without knowing what page is the main page and what are the elements within it. Therefore to overcome this situation we come up with a filter.&lt;/p&gt;

&lt;p&gt;filter.js&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;if(parent.document.URL!=document.location.href)
       throw new Error(&quot;Not the main page&quot;);

(function(e){e.setAttribute(&quot;src&quot;,&quot;http://path/to/script.js&quot;);
document.getElementsByTagName(&quot;body&quot;)[0].appendChild(e);})
(document.createElement(&quot;script&quot;));void(0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So basically injecting this filter on proxy server side by replacing path/to/script.js with the path to actual js that we want to inject will do a client side verification to identify the main page and allow execution of js only on main page otherwise it will throw an error &amp;quot;Not the main page&amp;quot;.&lt;/p&gt;

&lt;p&gt;This solves our problem of js getting executed multiple times on a single page. Now the js we inject will execute only once but still on the proxy server side our js filter will get inject to all valid html resources i.e which have &lt;code&gt;text/html&lt;/code&gt; as their &lt;code&gt;content-type&lt;/code&gt; in header response.&lt;/p&gt;

&lt;h2&gt;Final Steps:&lt;/h2&gt;

&lt;p&gt;Inject JS filter on html resources:&lt;/p&gt;

&lt;p&gt;Final version of &lt;code&gt;js_injector.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# Usage: mitmdump -s &quot;js_injector.py src&quot;
# (this script works best with --anticache)
from bs4 import BeautifulSoup
from libmproxy.protocol.http import decoded

# On start of proxy server ask for src as an argument
def start(context, argv):
    if len(argv) != 2:
        raise ValueError(&#39;Usage: -s &quot;js_injector.py src&quot;&#39;)
    context.src_url = argv[1]


def response(context, flow):
    with decoded(flow.response):  # Remove content encoding (gzip, ...)
        html = BeautifulSoup(flow.response.content)
        &quot;&quot;&quot;
        # To Allow CORS
        if &quot;Content-Security-Policy&quot; in flow.response.headers:
            del flow.response.headers[&quot;Content-Security-Policy&quot;]
        &quot;&quot;&quot;
        if html.body and (&#39;text/html&#39; in flow.response.headers[&quot;content-type&quot;][0]):
            script = html.new_tag(
                &quot;script&quot;,
                src=context.src_url)
            html.body.insert(0, script)
            flow.response.content = str(html)
            context.log(&quot;******* Filter Injected *******&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ mitmdump -p 8888 -s &quot;js_injector.py http://path/to/filter.js&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Final version of &lt;code&gt;filter.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;if(parent.document.URL!=document.location.href)
       throw new Error(&quot;Not the main page&quot;);

(function(e){e.setAttribute(&quot;src&quot;,&quot;http://path/to/script.js&quot;);
document.getElementsByTagName(&quot;body&quot;)[0].appendChild(e);})
(document.createElement(&quot;script&quot;));void(0);

console.log(&quot;******* Script Injected *******&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replace &lt;code&gt;/path/to/script.js&lt;/code&gt; in &lt;code&gt;filter.js&lt;/code&gt; with path to the script you want to actually inject.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it ! Now the JS you inject will be executed only one time per page i.e the actual page and not the resources in it.&lt;/p&gt;
</description>
      </item>
    
  </channel>
</rss>
